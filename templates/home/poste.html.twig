{% extends 'base.html.twig' %}

{% block title %}{{ post.title }}{% endblock %}

{% block body %}
<div style="height: 120px;"></div>
    <div class="container mt-6">
        
        <div class="card shadow-lg">
            <img src="{{ asset(post.imageUrl) }}" class="card-img-top" style="object-fit: cover;" alt="{{ post.title }}">
            <div class="card-body">
                <h1 class="card-title text-primary">{{ post.title }}</h1>
                <p class="card-text">{{ post.content }}</p>
                <a href="{{ path('compagne_public') }}" class="btn btn-secondary mt-3">Retour aux Postes</a>
            </div>
        </div>

        <!-- Comment Section -->
        <div class="mt-5">
            <div id="comments-list" class="list-group mt-3">
                {% for comment in post.comments %}
    {{ include('home/_comment.html.twig', {'comment': comment}) }}
{% else %}
    <p>Pas encore de commentaires. Soyez le premier Ã  commenter!</p>
{% endfor %}

        </div>
        </div>

        <!-- Add Comment Form -->
        {% if app.user %}
            {% form_theme commentForm '@FOSCKEditor/Form/ckeditor_widget.html.twig' %}
            {{ form_start(commentForm, {'attr': {'id': 'comment-form'}}) }}
                <div class="form-group mt-3">
    
                {{ form_row(commentForm.content) }}
                {{ form_row(commentForm._token) }}
                </div>
                <button type="submit" class="btn btn-primary mt-3">Publier</button>
            {{ form_end(commentForm) }}
        {% else  %}
            <a href="{{ path('app_login') }}">Se connecter</a>
        {% endif %}
    </div>
        

{% block javascripts %}
<script>
document.addEventListener("DOMContentLoaded", function () {
    // Handle comment submission via AJAX
    const commentForm = document.querySelector("#comment-form"); // Use the form's ID
    if (commentForm) {
        commentForm.addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent the default form submission
            let form = this;
            let formData = new FormData(form); // Automatically includes CSRF token
            fetch(form.action, {
                method: "POST",
                body: formData,
                headers: {
                    "X-Requested-With": "XMLHttpRequest" // Indicate this is an AJAX request
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                console.log("Response");
                return response.json(); // Parse the JSON response
            })
            .then(data => {
                if (data.status) { // Check for success (adjust based on your server response)
                    // Append the new comment to the comments list
                    document.querySelector("#comments-list").insertAdjacentHTML("beforeend", data.commentHtml);
                    form.reset(); // Reset the form
                } else {
                    // Display error message to the user
                    alert("Error: " + data.message);
                }
            })
            .catch(error => {
                console.error("Error submitting comment:", error);
                alert("An error occurred while submitting the comment."); 
            });
        });
    }
});








document.querySelectorAll('.edit-btn').forEach(button => {
    button.addEventListener('click', function (event) {
        event.preventDefault(); // Prevent form submission
        let commentId = this.getAttribute('data-id');

        let commentContent = document.getElementById(`comment-content-${commentId}`);
        let editForm = document.getElementById(`edit-form-${commentId}`);

        if (commentContent && editForm) {
            commentContent.classList.add('d-none');
            editForm.classList.remove('d-none');
        } else {
            console.error("Elements not found for comment ID:", commentId);
        }
    });
});

document.querySelectorAll('.cancel-btn').forEach(button => {
    button.addEventListener('click', function () {
        let commentId = this.getAttribute('data-id');

        let commentContent = document.getElementById(`comment-content-${commentId}`);
        let editForm = document.getElementById(`edit-form-${commentId}`);

        if (commentContent && editForm) {
            commentContent.classList.remove('d-none');
            editForm.classList.add('d-none');
        } else {
            console.error("Elements not found for comment ID:", commentId);
        }
    });
});
</script>



{% endblock %}
{% endblock %}

